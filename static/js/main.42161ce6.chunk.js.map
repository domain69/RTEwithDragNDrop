{"version":3,"sources":["super-charged-rte/src/components/common/Menu.js","super-charged-rte/src/components/toolbar/ToolBar.js","super-charged-rte/src/components/common/Button.js","super-charged-rte/src/components/common/Icon.js","super-charged-rte/src/elements/paragraph/utils.js","super-charged-rte/src/components/toolbar/Button/MarkButton.js","super-charged-rte/src/components/toolbar/Button/BlockButton.js","super-charged-rte/src/components/toolbar/index.js","super-charged-rte/src/elements/Common/RenderLeaf.js","super-charged-rte/src/elements/utils/renderElement.js","super-charged-rte/src/elements/Common/RenderElement.js","super-charged-rte/src/elements/paragraph/TextEditor.js","super-charged-rte/src/index.js","demo/Layout.js","demo/App.js","index.js"],"names":["Menu","React","forwardRef","ref","className","props","cx","css","Toolbar","Button","active","reversed","Icon","LIST_TYPES","isMarkActive","editor","format","marks","Editor","toggleMark","removeMark","addMark","isBlockActive","nodes","match","n","type","MarkButton","icon","useSlate","onMouseDown","event","preventDefault","BlockButton","isActive","isList","includes","Transforms","unwrapNodes","split","setNodes","block","children","wrapNodes","toggleBlock","index","Leaf","attributes","leaf","bold","code","italic","underline","Element","element","ContainerElement","value","useContext","RTEContext","getPathOfNode","childNode","at","length","node","path","JSON","stringify","useDrag","item","dropped","canDrop","drag","useDrop","accept","drop","monitor","lenOfItem","counter","i","moveNodes","to","TextEditor","renderElement","renderLeaf","placeholder","spellCheck","autoFocus","onKeyDown","HOTKEYS","Index","setValue","useCallback","useMemo","withHistory","withReact","createEditor","onChange","e","hotkey","isHotkey","initialValue","text","createContext","Layout","useState","providerValue","DndProvider","backend","HTML5Backend","Provider","App","id","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.42161ce6.chunk.js","sourcesContent":["import React from 'react'\r\nimport { cx, css } from 'emotion'\r\n\r\nconst Menu = React.forwardRef(({ className, ...props }, ref) => (\r\n    <div\r\n        {...props}\r\n        ref={ref}\r\n        className={cx(\r\n            className,\r\n            css`\r\n          & > * {\r\n            display: inline-block;\r\n          }\r\n          & > * + * {\r\n            margin-left: 15px;\r\n          }\r\n        `\r\n        )}\r\n    />\r\n))\r\n\r\nexport default Menu;","import React from 'react'\r\nimport { cx, css } from 'emotion'\r\n\r\nimport Menu from '../common/Menu';\r\n\r\nconst Toolbar = React.forwardRef(({ className, ...props }, ref) => (\r\n    <Menu\r\n        {...props}\r\n        ref={ref}\r\n        className={cx(\r\n            className,\r\n            css`\r\n          position: relative;\r\n          padding: 1px 18px 17px;\r\n          margin: 0 -20px;\r\n          border-bottom: 2px solid #eee;\r\n          margin-bottom: 20px;\r\n        `\r\n        )}\r\n    />\r\n))\r\n\r\nexport default Toolbar;","import React from 'react'\r\n\r\nimport { cx, css } from 'emotion'\r\n\r\nconst Button = React.forwardRef(\r\n    ({ className, active, reversed, ...props }, ref) => (\r\n        <span\r\n            {...props}\r\n            ref={ref}\r\n            className={cx(\r\n                className,\r\n                css`\r\n            cursor: pointer;\r\n            color: ${reversed\r\n                        ? active\r\n                            ? 'white'\r\n                            : '#aaa'\r\n                        : active\r\n                            ? 'black'\r\n                            : '#ccc'};\r\n          `\r\n            )}\r\n        />\r\n    )\r\n)\r\n\r\nexport default Button;","import React from 'react'\r\nimport { cx, css } from 'emotion'\r\n\r\nconst Icon = React.forwardRef(({ className, ...props }, ref) => (\r\n    <span\r\n        {...props}\r\n        ref={ref}\r\n        className={cx(\r\n            'material-icons',\r\n            className,\r\n            css`\r\n          font-size: 18px;\r\n          vertical-align: text-bottom;\r\n        `\r\n        )}\r\n    />\r\n))\r\n\r\nexport default Icon;","import { Editor, Transforms } from 'slate'\r\n\r\nconst LIST_TYPES = ['numbered-list', 'bulleted-list']\r\n\r\n\r\nexport const isMarkActive = (editor, format) => {\r\n    const marks = Editor.marks(editor)\r\n    return marks ? marks[format] === true : false\r\n}\r\n\r\nexport const toggleMark = (editor, format) => {\r\n    const isActive = isMarkActive(editor, format)\r\n\r\n    if (isActive) {\r\n\r\n        Editor.removeMark(editor, format)\r\n    } else {\r\n        Editor.addMark(editor, format, true)\r\n    }\r\n}\r\n\r\nexport const isBlockActive = (editor, format) => {\r\n    const [match] = Editor.nodes(editor, {\r\n        match: n => n.type === format,\r\n    })\r\n\r\n\r\n    return !!match\r\n}\r\n\r\nexport const toggleBlock = (editor, format) => {\r\n    const isActive = isBlockActive(editor, format)\r\n    const isList = LIST_TYPES.includes(format)\r\n\r\n    Transforms.unwrapNodes(editor, {\r\n        match: n => LIST_TYPES.includes(n.type),\r\n        split: true,\r\n    })\r\n\r\n    Transforms.setNodes(editor, {\r\n        type: isActive ? 'paragraph' : isList ? 'list-item' : format,\r\n    })\r\n\r\n    if (!isActive && isList) {\r\n        const block = { type: format, children: [] }\r\n        Transforms.wrapNodes(editor, block)\r\n    }\r\n\r\n\r\n}","import { useSlate } from 'slate-react'\r\nimport React from 'react';\r\n\r\nimport Button from '../../common/Button';\r\nimport Icon from '../../common/Icon';\r\nimport { toggleMark, isMarkActive } from '../../../elements/paragraph/utils';\r\n\r\nconst MarkButton = ({ format, icon }) => {\r\n    const editor = useSlate()\r\n    return (\r\n        <Button\r\n            active={isMarkActive(editor, format)}\r\n            onMouseDown={event => {\r\n                event.preventDefault()\r\n                toggleMark(editor, format)\r\n            }}\r\n        >\r\n            <Icon>{icon}</Icon>\r\n        </Button>\r\n    )\r\n}\r\n\r\nexport default MarkButton;","import { useSlate } from 'slate-react'\r\nimport React from 'react';\r\n\r\nimport Button from '../../common/Button';\r\nimport Icon from '../../common/Icon';\r\nimport { isBlockActive, toggleBlock } from '../../../elements/paragraph/utils';\r\nconst BlockButton = ({ format, icon }) => {\r\n    const editor = useSlate()\r\n    return (\r\n        <Button\r\n            active={isBlockActive(editor, format)}\r\n            onMouseDown={event => {\r\n                event.preventDefault()\r\n                toggleBlock(editor, format)\r\n            }}\r\n        >\r\n            <Icon>{icon}</Icon>\r\n        </Button>\r\n    )\r\n}\r\nexport default BlockButton;","import React from 'react'\r\n\r\nimport Toolbar from './ToolBar';\r\nimport MarkButton from './Button/MarkButton';\r\nimport BlockButton from './Button/BlockButton';\r\nconst index = () => {\r\n    return (\r\n        <Toolbar>\r\n            <MarkButton format=\"bold\" icon=\"format_bold\" />\r\n            <MarkButton format=\"italic\" icon=\"format_italic\" />\r\n            <MarkButton format=\"underline\" icon=\"format_underlined\" />\r\n            <MarkButton format=\"code\" icon=\"code\" />\r\n            <BlockButton format=\"heading-one\" icon=\"looks_one\" />\r\n            <BlockButton format=\"heading-two\" icon=\"looks_two\" />\r\n            <BlockButton format=\"block-quote\" icon=\"format_quote\" />\r\n            <BlockButton format=\"numbered-list\" icon=\"format_list_numbered\" />\r\n            <BlockButton format=\"bulleted-list\" icon=\"format_list_bulleted\" />\r\n        </Toolbar>\r\n    )\r\n}\r\nexport default index;","import React from 'react'\r\n\r\nconst Leaf = ({ attributes, children, leaf }) => {\r\n    if (leaf.bold) {\r\n        children = <strong>{children}</strong>\r\n    }\r\n\r\n    if (leaf.code) {\r\n        children = <code>{children}</code>\r\n    }\r\n\r\n    if (leaf.italic) {\r\n        children = <em>{children}</em>\r\n    }\r\n\r\n    if (leaf.underline) {\r\n        children = <u>{children}</u>\r\n    }\r\n\r\n    return <span {...attributes}>{children}</span>\r\n}\r\n\r\nexport default Leaf;","import React from 'react'\r\n\r\n\r\n\r\nexport const Element = ({ attributes, children, element }) => {\r\n\r\n    switch (element.type) {\r\n        case 'block-quote':\r\n            return <blockquote {...attributes}>{children}</blockquote>\r\n        case 'bulleted-list':\r\n            return <ul {...attributes}>{children}</ul>\r\n        case 'heading-one':\r\n            return <h1 {...attributes}>{children}</h1>\r\n        case 'heading-two':\r\n            return <h2 {...attributes}>{children}</h2>\r\n        case 'list-item':\r\n            return <li {...attributes}>{children}</li>\r\n        case 'numbered-list':\r\n            return <ol {...attributes}>{children}</ol>\r\n        default:\r\n            return <p {...attributes}>{children}</p>\r\n    }\r\n}","import React, { useContext } from 'react'\r\nimport { useDrag, useDrop } from 'react-dnd';\r\nimport { Editor, Transforms } from 'slate';\r\nimport { useSlate } from 'slate-react';\r\n\r\nimport './RenderElement.css'\r\nimport { Element } from '../utils/renderElement';\r\nimport { RTEContext } from '../../../../demo/Layout';\r\nconst ContainerElement = (props) => {\r\n    const { value } = useContext(RTEContext)\r\n    const editor = useSlate()\r\n    const getPathOfNode = (childNode) => {\r\n        for (const [node, path] of Editor.nodes(editor, { at: value.length })) {\r\n            if (JSON.stringify(node) === JSON.stringify(childNode)) {\r\n                return path;\r\n            }\r\n        }\r\n\r\n    }\r\n    const path = getPathOfNode(props.element)\r\n\r\n    const [, drag] = useDrag({\r\n        item: {\r\n            type: 'container',\r\n            path: getPathOfNode(props.element),\r\n            dropped: false,\r\n            canDrop: true\r\n        },\r\n    });\r\n    const [, drop] = useDrop({\r\n        accept: 'container',\r\n        drop: (item, monitor) => {\r\n            const lenOfItem = item.path.length\r\n            let counter = 0;\r\n            if (path && item.canDrop && lenOfItem < path.length) {\r\n                for (let i = 0; i < item.path.length; i++) {\r\n                    if (item.path[i] === path[i]) {\r\n                        counter++;\r\n                    }\r\n                }\r\n                if (counter === lenOfItem) {\r\n                    item.canDrop = false\r\n                }\r\n            }\r\n            if (!item.dropped && item.canDrop) {\r\n                Transforms.moveNodes(editor, { at: item.path, to: path })\r\n            }\r\n            item.dropped = true\r\n        },\r\n    })\r\n\r\n    return (\r\n        <div className=\"dropContainer\" ref={drop}>\r\n            <div className=\"container\" ref={drag}>\r\n                <Element {...props} />\r\n            </div>\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\nexport default ContainerElement;\r\n","import React from 'react';\r\nimport { Editable } from 'slate-react'\r\n\r\nconst TextEditor = (props) => {\r\n\r\n    return (\r\n        <Editable\r\n            renderElement={props.renderElement}\r\n            renderLeaf={props.renderLeaf}\r\n            placeholder=\"Enter some rich text…\"\r\n            spellCheck\r\n            autoFocus\r\n            onKeyDown={props.onKeyDown}\r\n\r\n        />\r\n\r\n    )\r\n}\r\nexport default TextEditor;\r\n\r\n\r\n\r\n\r\n","import React, { useCallback, useMemo, useContext } from 'react';\r\nimport { withReact, Slate } from 'slate-react'\r\nimport { createEditor } from 'slate'\r\nimport { withHistory } from 'slate-history'\r\nimport isHotkey from 'is-hotkey';\r\n\r\nimport { RTEContext } from '../../demo/Layout';\r\nimport Toolbar from './components/toolbar/index';\r\nimport Leaf from './elements/Common/RenderLeaf';\r\nimport { toggleMark } from './elements/paragraph/utils';\r\nimport Element from './elements/Common/RenderElement'\r\nimport { TextEditor } from './elements/index';\r\n\r\n\r\nconst HOTKEYS = {\r\n    'mod+b': 'bold',\r\n    'mod+i': 'italic',\r\n    'mod+u': 'underline',\r\n    'mod+`': 'code',\r\n}\r\nconst Index = (props) => {\r\n    const { value, setValue } = useContext(RTEContext)\r\n    const renderElement = useCallback((props) => <Element {...props} />, [])\r\n    const renderLeaf = useCallback(props => <Leaf {...props} />, [])\r\n    const editor = useMemo(() => withHistory(withReact(createEditor())), [])\r\n\r\n    const onKeyDown = (e) => {\r\n        for (const hotkey in HOTKEYS) {\r\n            if (isHotkey(hotkey, e)) {\r\n                e.preventDefault()\r\n                const mark = HOTKEYS[hotkey]\r\n                toggleMark(editor, mark)\r\n            }\r\n        }\r\n    }\r\n    return (\r\n        <Slate editor={editor} value={value} onChange={setValue}>\r\n            <Toolbar />\r\n            <TextEditor renderElement={renderElement} renderLeaf={renderLeaf} onKeyDown={onKeyDown} />\r\n        </Slate >\r\n    )\r\n}\r\nexport default Index;\r\n\r\n\r\n\r\n","import React, { useState, createContext } from 'react'\r\nimport { HTML5Backend } from 'react-dnd-html5-backend'\r\nimport { DndProvider } from 'react-dnd';\r\nimport TextEditor from '../super-charged-rte/src/index';\r\n\r\nconst initialValue = [\r\n    {\r\n\r\n        type: 'paragraph',\r\n        children: [\r\n            { text: 'This is editable test ' },\r\n            { text: 'rich', bold: true },\r\n            { text: ' text, ' },\r\n            { text: 'much', italic: true },\r\n            { text: ' better than a ' },\r\n            { text: '<textarea>', code: true },\r\n            { text: '!' },\r\n        ],\r\n\r\n    },\r\n    {\r\n\r\n        type: 'paragraph',\r\n        children: [\r\n            {\r\n                text:\r\n                    \"Since it's rich text, you can do things like turn a selection of text \",\r\n            },\r\n            { text: 'bold', bold: true },\r\n            {\r\n                text:\r\n                    ', or add a semantically rendered block quote in the middle of the page, like this:',\r\n            },\r\n        ],\r\n    },\r\n    {\r\n\r\n        type: 'block-quote',\r\n        children: [{ text: 'A wise quote.' }],\r\n\r\n    },\r\n    {\r\n        type: 'paragraph',\r\n        children: [{ text: 'Try it out for yourself!' }],\r\n\r\n    },\r\n]\r\n\r\nexport const RTEContext = createContext();\r\n\r\nexport function Layout() {\r\n    const [value, setValue] = useState(initialValue)\r\n    const providerValue = {\r\n        value,\r\n        setValue\r\n    }\r\n\r\n\r\n    return (\r\n        <DndProvider backend={HTML5Backend}>\r\n            <RTEContext.Provider value={providerValue}>\r\n                <TextEditor />\r\n            </RTEContext.Provider>\r\n        </DndProvider>\r\n\r\n\r\n    )\r\n}\r\n","import React from 'react';\n\nimport './App.css'\nimport { Layout } from './Layout';\n\nfunction App() {\n  return (\n    <div id=\"textarea\">\n      <Layout />\n    </div>\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './demo/App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}